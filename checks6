import argparse
import requests
from requests.auth import AuthBase
from requests_auth_veracode_hmac import RequestsAuthPluginVeracodeHMAC

BASE_URL = "https://api.veracode.com"  # Adjust the URL based on the correct API endpoints

def get_application(app_name):
    url = f"{BASE_URL}/appsec/v1/applications?name={app_name}"
    response = requests.get(url, auth=RequestsAuthPluginVeracodeHMAC())
    if response.status_code == 200:
        data = response.json()
        return data.get('applications', [])
    return None

def get_sandboxes(app_id):
    url = f"{BASE_URL}/appsec/v1/applications/{app_id}/sandboxes"
    response = requests.get(url, auth=RequestsAuthPluginVeracodeHMAC())
    if response.status_code == 200:
        return response.json().get('sandboxes', [])
    return None

def get_sca_scan(sandbox_id):
    url = f"{BASE_URL}/appsec/v1/sandboxes/{sandbox_id}/scans"
    response = requests.get(url, auth=RequestsAuthPluginVeracodeHMAC())
    if response.status_code == 200:
        return response.json().get('scans', [])
    return None

def check_scan_status(scan_id):
    url = f"{BASE_URL}/appsec/v1/scans/{scan_id}"
    response = requests.get(url, auth=RequestsAuthPluginVeracodeHMAC())
    if response.status_code == 200:
        return response.json()
    return None

def get_policy(scan):
    policy_name = scan.get("policy_name", "Unknown")
    return "PASSED" if policy_name == "ORG Gateway Default" else f"FAILED - {policy_name}"

def get_modules(scan):
    return scan.get("modules", [])

def get_findings(scan_id):
    url = f"{BASE_URL}/appsec/v1/scans/{scan_id}/findings"
    response = requests.get(url, auth=RequestsAuthPluginVeracodeHMAC())
    if response.status_code == 200:
        return response.json().get("findings", [])
    return []

def get_promoted_scan(app_id):
    url = f"{BASE_URL}/appsec/v1/applications/{app_id}/promoted_scan"
    response = requests.get(url, auth=RequestsAuthPluginVeracodeHMAC())
    if response.status_code == 200:
        return response.json()
    return None

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("scan_name", help="Scan name in format MOTSID-AVT-QuarterYear-SCA")
    args = parser.parse_args()
    scan_name = args.scan_name
    app_name = "-".join(scan_name.split("-")[:2]) + "-SCA-AVT"
    
    print(f"Checking application: {app_name}")
    app_data = get_application(app_name)
    if not app_data:
        print("Application check: FAILED")
        return
    app_id = app_data[0]['id']
    print("Application check: PASSED")
    
    sandboxes = get_sandboxes(app_id)
    sandbox = next((s for s in sandboxes if s['name'] == scan_name), None)
    if not sandbox:
        print("Sandbox check: FAILED")
        return
    sandbox_id = sandbox['id']
    print("Sandbox check: PASSED")
    
    scans = get_sca_scan(sandbox_id)
    scan = next((s for s in scans if s['name'] == scan_name), None)
    if not scan:
        print("Scan check: FAILED")
        return
    scan_id = scan['id']
    print("Scan check: PASSED")
    
    scan_status = check_scan_status(scan_id)
    if scan_status['status'] == "Completed":
        print("Scan completed check: PASSED")
    else:
        print("Scan completed check: FAILED")
    
    print(f"Auto-Scan option: {'OFF' if not scan_status['auto_scan'] else 'ON'}")
    print(f"Policy Check: {get_policy(scan_status)}")
    
    findings = get_findings(scan_id)
    critical_count = sum(1 for f in findings if f['severity'] == "Critical")
    high_count = sum(1 for f in findings if f['severity'] == "High")
    medium_count = sum(1 for f in findings if f['severity'] == "Medium")
    print(f"New Findings - Critical: {critical_count}, High: {high_count}, Medium: {medium_count}")
    
    open_findings = [f for f in findings if f['status'] == "Open"]
    print(f"Open Findings - Critical: {sum(1 for f in open_findings if f['severity'] == 'Critical')}, High: {sum(1 for f in open_findings if f['severity'] == 'High')}, Medium: {sum(1 for f in open_findings if f['severity'] == 'Medium')}")
    
    proposed_fp = [f for f in findings if f['false_positive_status'] == "Proposed"]
    print(f"False Positive Proposed Findings: {len(proposed_fp)} IDs: {[f['id'] for f in proposed_fp]}")
    
    promoted_scan = get_promoted_scan(app_id)
    if promoted_scan:
        print(f"Last promoted scan: {promoted_scan['name']}")
    else:
        print("No promoted scan found")

if __name__ == "__main__":
    main()
